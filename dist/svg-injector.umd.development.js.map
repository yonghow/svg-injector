{"version":3,"file":"svg-injector.umd.development.js","sources":["../src/clone-svg.ts","../src/is-local.ts","../src/svg-cache.ts","../src/request-queue.ts","../src/load-svg.ts","../src/unique-id.ts","../src/inject-element.ts","../src/types.ts","../src/svg-injector.ts"],"sourcesContent":["const cloneSvg = (sourceSvg: HTMLElement | SVGSVGElement) =>\n  sourceSvg.cloneNode(true) as Element\n\nexport default cloneSvg\n","const isLocal = () => window.location.protocol === 'file:'\n\nexport default isLocal\n","const svgCache = new Map<\n  string,\n  HTMLElement | SVGSVGElement | Error | undefined\n>()\n\nexport default svgCache\n","import cloneSvg from './clone-svg'\nimport svgCache from './svg-cache'\nimport { Errback } from './types'\n\nlet requestQueue: { [key: string]: Errback[] } = {}\n\nexport const clear = () => {\n  requestQueue = {}\n}\n\nexport const queueRequest = (url: string, callback: Errback) => {\n  requestQueue[url] = requestQueue[url] || []\n  requestQueue[url].push(callback)\n}\n\nexport const processRequestQueue = (url: string) => {\n  for (let i = 0, len = requestQueue[url].length; i < len; i++) {\n    // Make these calls async so we avoid blocking the page/renderer.\n    setTimeout(() => {\n      /* istanbul ignore else */\n      if (Array.isArray(requestQueue[url])) {\n        const cacheValue = svgCache.get(url)\n        const callback = requestQueue[url][i]\n\n        /* istanbul ignore else */\n        if (\n          cacheValue instanceof SVGSVGElement ||\n          cacheValue instanceof HTMLElement\n        ) {\n          callback(null, cloneSvg(cacheValue))\n        }\n\n        /* istanbul ignore else */\n        if (cacheValue instanceof Error) {\n          callback(cacheValue)\n        }\n\n        /* istanbul ignore else */\n        if (i === requestQueue[url].length - 1) {\n          delete requestQueue[url]\n        }\n      }\n    }, 0)\n  }\n}\n","import cloneSvg from './clone-svg'\nimport isLocal from './is-local'\nimport { processRequestQueue, queueRequest } from './request-queue'\nimport svgCache from './svg-cache'\nimport { Errback } from './types'\n\nconst loadSvg = (url: string, withCredentials: boolean, callback: Errback) => {\n  if (svgCache.has(url)) {\n    const cacheValue = svgCache.get(url)\n\n    if (\n      cacheValue instanceof SVGSVGElement ||\n      cacheValue instanceof HTMLElement\n    ) {\n      callback(null, cloneSvg(cacheValue))\n      return\n    }\n\n    if (cacheValue instanceof Error) {\n      callback(cacheValue)\n      return\n    }\n\n    queueRequest(url, callback)\n\n    return\n  }\n\n  // Seed the cache to indicate we are loading this URL.\n  svgCache.set(url, undefined)\n  queueRequest(url, callback)\n\n  const httpRequest = new XMLHttpRequest()\n\n  httpRequest.withCredentials = withCredentials\n\n  httpRequest.onreadystatechange = () => {\n    try {\n      if (httpRequest.readyState === 4) {\n        if (httpRequest.status === 404 || httpRequest.responseXML === null) {\n          throw new Error(\n            isLocal()\n              ? 'Note: SVG injection ajax calls do not work locally without adjusting security setting in your browser. Or consider using a local webserver.'\n              : 'Unable to load SVG file: ' + url\n          )\n        }\n\n        if (\n          httpRequest.status === 200 ||\n          (isLocal() && httpRequest.status === 0)\n        ) {\n          /* istanbul ignore else */\n          if (httpRequest.responseXML instanceof Document) {\n            /* istanbul ignore else */\n            if (httpRequest.responseXML.documentElement) {\n              svgCache.set(url, httpRequest.responseXML.documentElement)\n            }\n          }\n          processRequestQueue(url)\n        } else {\n          throw new Error(\n            'There was a problem injecting the SVG: ' +\n              httpRequest.status +\n              ' ' +\n              httpRequest.statusText\n          )\n        }\n      }\n    } catch (error) {\n      svgCache.set(url, error)\n      processRequestQueue(url)\n    }\n  }\n\n  httpRequest.open('GET', url)\n\n  // Treat and parse the response as XML, even if the server sends us a\n  // different mimetype.\n  /* istanbul ignore else */\n  if (httpRequest.overrideMimeType) {\n    httpRequest.overrideMimeType('text/xml')\n  }\n\n  httpRequest.send()\n}\n\nexport default loadSvg\n","let idCounter = 0\nconst uniqueId = () => ++idCounter\nexport default uniqueId\n","import loadSvg from './load-svg'\nimport { BeforeEach, Errback, EvalScripts } from './types'\nimport uniqueId from './unique-id'\n\ntype ElementType = Element | HTMLElement | null\n\nconst injectedElements: ElementType[] = []\nconst ranScripts: { [key: string]: boolean } = {}\nconst svgNamespace = 'http://www.w3.org/2000/svg'\nconst xlinkNamespace = 'http://www.w3.org/1999/xlink'\n\nconst injectElement = (\n  el: NonNullable<ElementType>,\n  evalScripts: EvalScripts,\n  renumerateIRIElements: boolean,\n  beforeEach: BeforeEach,\n  withCredentials: boolean,\n  callback: Errback\n) => {\n  const imgUrl = el.getAttribute('data-src') || el.getAttribute('src')\n\n  /* istanbul ignore else */\n  if (!imgUrl || !/\\.svg/i.test(imgUrl)) {\n    callback(\n      new Error(\n        'Attempted to inject a file with a non-svg extension: ' + imgUrl\n      )\n    )\n    return\n  }\n\n  // Make sure we aren't already in the process of injecting this element to\n  // avoid a race condition if multiple injections for the same element are run.\n  // :NOTE: Using indexOf() only _after_ we check for SVG support and bail, so\n  // no need for IE8 indexOf() polyfill.\n  /* istanbul ignore else */\n  if (injectedElements.indexOf(el) !== -1) {\n    // TODO: Extract.\n    injectedElements.splice(injectedElements.indexOf(el), 1)\n    ;(el as ElementType) = null\n    return\n  }\n\n  // Remember the request to inject this element, in case other injection calls\n  // are also trying to replace this element before we finish.\n  injectedElements.push(el)\n\n  // Try to avoid loading the orginal image src if possible.\n  el.setAttribute('src', '')\n\n  loadSvg(imgUrl, withCredentials, (error, svg) => {\n    /* istanbul ignore else */\n    if (!svg) {\n      // TODO: Extract.\n      injectedElements.splice(injectedElements.indexOf(el), 1)\n      ;(el as ElementType) = null\n      callback(error)\n      return\n    }\n\n    const imgId = el.getAttribute('id')\n    /* istanbul ignore else */\n    if (imgId) {\n      svg.setAttribute('id', imgId)\n    }\n\n    const imgTitle = el.getAttribute('title')\n    /* istanbul ignore else */\n    if (imgTitle) {\n      svg.setAttribute('title', imgTitle)\n    }\n\n    const imgWidth = el.getAttribute('width')\n    /* istanbul ignore else */\n    if (imgWidth) {\n      svg.setAttribute('width', imgWidth)\n    }\n\n    const imgHeight = el.getAttribute('height')\n    /* istanbul ignore else */\n    if (imgHeight) {\n      svg.setAttribute('height', imgHeight)\n    }\n\n    const mergedClasses = Array.from(\n      new Set([\n        ...(svg.getAttribute('class') || '').split(' '),\n        'injected-svg',\n        ...(el.getAttribute('class') || '').split(' ')\n      ])\n    )\n      .join(' ')\n      .trim()\n    svg.setAttribute('class', mergedClasses)\n\n    const imgStyle = el.getAttribute('style')\n    /* istanbul ignore else */\n    if (imgStyle) {\n      svg.setAttribute('style', imgStyle)\n    }\n\n    svg.setAttribute('data-src', imgUrl)\n\n    // Copy all the data elements to the svg.\n    const imgData = [].filter.call(el.attributes, (at: Attr) => {\n      return /^data-\\w[\\w-]*$/.test(at.name)\n    })\n\n    Array.prototype.forEach.call(imgData, (dataAttr: Attr) => {\n      /* istanbul ignore else */\n      if (dataAttr.name && dataAttr.value) {\n        svg.setAttribute(dataAttr.name, dataAttr.value)\n      }\n    })\n\n    /* istanbul ignore else */\n    if (renumerateIRIElements) {\n      // Make sure any internally referenced clipPath ids and their clip-path\n      // references are unique.\n      //\n      // This addresses the issue of having multiple instances of the same SVG\n      // on a page and only the first clipPath id is referenced.\n      //\n      // Browsers often shortcut the SVG Spec and don't use clipPaths contained\n      // in parent elements that are hidden, so if you hide the first SVG\n      // instance on the page, then all other instances lose their clipping.\n      // Reference: https://bugzilla.mozilla.org/show_bug.cgi?id=376027\n\n      // Handle all defs elements that have iri capable attributes as defined by\n      // w3c: http://www.w3.org/TR/SVG/linking.html#processingIRI. Mapping IRI\n      // addressable elements to the properties that can reference them.\n      const iriElementsAndProperties: { [key: string]: string[] } = {\n        clipPath: ['clip-path'],\n        'color-profile': ['color-profile'],\n        cursor: ['cursor'],\n        filter: ['filter'],\n        linearGradient: ['fill', 'stroke'],\n        marker: ['marker', 'marker-start', 'marker-mid', 'marker-end'],\n        mask: ['mask'],\n        path: [],\n        pattern: ['fill', 'stroke'],\n        radialGradient: ['fill', 'stroke']\n      }\n\n      let element\n      let elements\n      let properties\n      let currentId: string\n      let newId: string\n\n      Object.keys(iriElementsAndProperties).forEach(key => {\n        element = key\n        properties = iriElementsAndProperties[key]\n\n        elements = svg.querySelectorAll(element + '[id]')\n        for (let a = 0, elementsLen = elements.length; a < elementsLen; a++) {\n          currentId = elements[a].id\n          newId = currentId + '-' + uniqueId()\n\n          // All of the properties that can reference this element type.\n          let referencingElements\n          Array.prototype.forEach.call(properties, (property: string) => {\n            // :NOTE: using a substring match attr selector here to deal with IE\n            // \"adding extra quotes in url() attrs\".\n            referencingElements = svg.querySelectorAll(\n              '[' + property + '*=\"' + currentId + '\"]'\n            )\n            for (\n              let b = 0, referencingElementLen = referencingElements.length;\n              b < referencingElementLen;\n              b++\n            ) {\n              const attrValue: string | null = referencingElements[\n                b\n              ].getAttribute(property)\n              if (\n                attrValue &&\n                !attrValue.match(new RegExp('url\\\\(#' + currentId + '\\\\)'))\n              ) {\n                continue\n              }\n              referencingElements[b].setAttribute(\n                property,\n                'url(#' + newId + ')'\n              )\n            }\n          })\n\n          const allLinks = svg.querySelectorAll('[*|href]')\n          const links = []\n          for (let c = 0, allLinksLen = allLinks.length; c < allLinksLen; c++) {\n            const href = allLinks[c].getAttributeNS(xlinkNamespace, 'href')\n            /* istanbul ignore else */\n            if (href && href.toString() === '#' + elements[a].id) {\n              links.push(allLinks[c])\n            }\n          }\n          for (let d = 0, linksLen = links.length; d < linksLen; d++) {\n            links[d].setAttributeNS(xlinkNamespace, 'href', '#' + newId)\n          }\n\n          elements[a].id = newId\n        }\n      })\n    }\n\n    // Remove any unwanted/invalid namespaces that might have been added by SVG\n    // editing tools.\n    svg.removeAttribute('xmlns:a')\n\n    // Post page load injected SVGs don't automatically have their script\n    // elements run, so we'll need to make that happen, if requested.\n\n    // Find then prune the scripts.\n    const scripts = svg.querySelectorAll('script')\n    const scriptsToEval: string[] = []\n    let script\n    let scriptType\n\n    for (let i = 0, scriptsLen = scripts.length; i < scriptsLen; i++) {\n      scriptType = scripts[i].getAttribute('type')\n\n      // Only process javascript types. SVG defaults to 'application/ecmascript'\n      // for unset types.\n      /* istanbul ignore else */\n      if (\n        !scriptType ||\n        scriptType === 'application/ecmascript' ||\n        scriptType === 'application/javascript' ||\n        scriptType === 'text/javascript'\n      ) {\n        // innerText for IE, textContent for other browsers.\n        script = scripts[i].innerText || scripts[i].textContent\n\n        // Stash.\n        /* istanbul ignore else */\n        if (script) {\n          scriptsToEval.push(script)\n        }\n\n        // Tidy up and remove the script element since we don't need it anymore.\n        svg.removeChild(scripts[i])\n      }\n    }\n\n    // Run/Eval the scripts if needed.\n    /* istanbul ignore else */\n    if (\n      scriptsToEval.length > 0 &&\n      (evalScripts === 'always' ||\n        (evalScripts === 'once' && !ranScripts[imgUrl]))\n    ) {\n      for (\n        let l = 0, scriptsToEvalLen = scriptsToEval.length;\n        l < scriptsToEvalLen;\n        l++\n      ) {\n        // :NOTE: Yup, this is a form of eval, but it is being used to eval code\n        // the caller has explictely asked to be loaded, and the code is in a\n        // caller defined SVG file... not raw user input.\n        //\n        // Also, the code is evaluated in a closure and not in the global scope.\n        // If you need to put something in global scope, use 'window'.\n        new Function(scriptsToEval[l])(window)\n      }\n\n      // Remember we already ran scripts for this svg.\n      ranScripts[imgUrl] = true\n    }\n\n    // :WORKAROUND: IE doesn't evaluate <style> tags in SVGs that are\n    // dynamically added to the page. This trick will trigger IE to read and use\n    // any existing SVG <style> tags.\n    //\n    // Reference: https://github.com/iconic/SVGInjector/issues/23.\n    const styleTags = svg.querySelectorAll('style')\n    Array.prototype.forEach.call(styleTags, (styleTag: HTMLStyleElement) => {\n      styleTag.textContent += ''\n    })\n\n    svg.setAttribute('xmlns', svgNamespace)\n    svg.setAttribute('xmlns:xlink', xlinkNamespace)\n\n    beforeEach(svg)\n\n    // Replace the image with the svg.\n    /* istanbul ignore else */\n    if (el.parentNode) {\n      el.parentNode.replaceChild(svg, el)\n    }\n\n    // Now that we no longer need it, drop references to the original element so\n    // it can be GC'd.\n    // TODO: Extract\n    injectedElements.splice(injectedElements.indexOf(el), 1)\n    ;(el as ElementType) = null\n\n    callback(null, svg)\n  })\n}\n\nexport default injectElement\n","/* istanbul ignore file */\n\nexport type AfterAll = (elementsLoaded: number) => void\n\nexport type BeforeEach = (svg: Element) => void\n\nexport type Errback = (error: Error | null, svg?: Element) => void\n\nexport enum EvalScripts {\n  Always = 'always',\n  Once = 'once',\n  Never = 'never'\n}\n","import injectElement from './inject-element'\nimport { AfterAll, BeforeEach, Errback, EvalScripts } from './types'\n\ntype Elements = HTMLCollectionOf<Element> | NodeListOf<Element> | Element | null\n\ninterface OptionalArgs {\n  afterAll?: AfterAll\n  afterEach?: Errback\n  beforeEach?: BeforeEach\n  evalScripts?: EvalScripts\n  renumerateIRIElements?: boolean\n  withCredentials?: boolean\n}\n\nconst SVGInjector = (\n  elements: Elements,\n  {\n    afterAll = () => undefined,\n    afterEach = () => undefined,\n    beforeEach = () => undefined,\n    evalScripts = EvalScripts.Never,\n    renumerateIRIElements = true,\n    withCredentials = false,\n  }: OptionalArgs = {}\n) => {\n  if (elements && 'length' in elements) {\n    let elementsLoaded = 0\n    for (let i = 0, j = elements.length; i < j; i++) {\n      injectElement(\n        elements[i],\n        evalScripts,\n        renumerateIRIElements,\n        beforeEach,\n        withCredentials,\n        (error, svg) => {\n          afterEach(error, svg)\n          if (\n            elements &&\n            'length' in elements &&\n            elements.length === ++elementsLoaded\n          ) {\n            afterAll(elementsLoaded)\n          }\n        }\n      )\n    }\n  } else if (elements) {\n    injectElement(\n      elements,\n      evalScripts,\n      renumerateIRIElements,\n      beforeEach,\n      withCredentials,\n      (error, svg) => {\n        afterEach(error, svg)\n        afterAll(1)\n        elements = null\n      }\n    )\n  } else {\n    afterAll(0)\n  }\n}\n\nexport default SVGInjector\n"],"names":["cloneSvg","sourceSvg","cloneNode","isLocal","window","location","protocol","svgCache","Map","requestQueue","queueRequest","url","callback","push","processRequestQueue","i","len","setTimeout","Array","isArray","cacheValue","get","SVGSVGElement","HTMLElement","Error","length","loadSvg","withCredentials","has","set","undefined","httpRequest","XMLHttpRequest","onreadystatechange","readyState","status","responseXML","Document","documentElement","statusText","error","open","overrideMimeType","send","idCounter","uniqueId","injectedElements","ranScripts","svgNamespace","xlinkNamespace","injectElement","el","evalScripts","renumerateIRIElements","beforeEach","imgUrl","getAttribute","test","indexOf","splice","setAttribute","svg","imgId","imgTitle","imgWidth","imgHeight","mergedClasses","from","Set","split","join","trim","imgStyle","imgData","filter","call","attributes","at","name","prototype","forEach","dataAttr","value","iriElementsAndProperties_1","clipPath","cursor","linearGradient","marker","mask","path","pattern","radialGradient","element_1","elements_1","properties_1","currentId_1","newId_1","Object","keys","key","querySelectorAll","a","elementsLen","id","referencingElements","property","b","referencingElementLen","attrValue","match","RegExp","allLinks","links","c","allLinksLen","href","getAttributeNS","toString","d","linksLen","setAttributeNS","removeAttribute","scripts","scriptsToEval","script","scriptType","scriptsLen","innerText","textContent","removeChild","l","scriptsToEvalLen","Function","styleTags","styleTag","parentNode","replaceChild","EvalScripts","SVGInjector","elements","_a","_b","_c","afterAll","_d","afterEach","_e","_f","_g","_h","elementsLoaded_1","j"],"mappings":"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"}